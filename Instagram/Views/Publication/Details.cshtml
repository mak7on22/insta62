@model Instagram.Models.Publication

@{
    ViewData["Title"] = "Details";
}

<head>
    <meta charset="UTF-8">
    <title>Instagram</title>
    <link rel="stylesheet" href="~/css/Storis.css">
    <link rel="stylesheet" href="~/css/DetailStoris.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap" rel="stylesheet">
</head>

 <div class="col-md-8">
                <div class="card">
                    <div class="gg">
                        <div class="imagess">
                            <label asp-for="@Model.User.Avatar" class="control-label textDel"></label>
                            <img class="imagess" src="@Url.Content(Model.User?.Avatar)" alt="Изображение"/>
                        </div>
                        <div class="vc">
                            <strong class="sas"><a class="nn" asp-controller="User" asp-action="Profile" asp-route-id="@Model.UserId">@Model.User.Login </a></strong>
                        </div>
                        <div class="dtas">
                            <p class="eed" style="margin: 0; display:none;" type="hidden">@Model.DateOfAdd</p>
                        </div>
                        <div class="ggf">
                            <ion-icon class="fa" name="ellipsis-horizontal-outline"></ion-icon>
                        </div>
                    </div>
                    <img src="@Model.Pictures" class="card-img-top" alt="Изображение">
                    <div class="chec">
                        <form method="post" class="chec" style="all: initial;" asp-action="Like" asp-route-publicationId="@Model.Id">
                            <label class="cont">
                                <input type="submit" class="like-button" data-publication-id="@Model.Id">
                                <svg class="like-icon" version="1.0" viewBox="0 0 24 24" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                                    <path d="M16.4,4C14.6,4,13,4.9,12,6.3C11,4.9,9.4,4,7.6,4C4.5,4,2,6.5,2,9.6C2,14,12,22,12,22s10-8,10-12.4C22,6.5,19.5,4,16.4,4z"></path>
                                </svg>
                            </label>
                        </form>
                        <div>
                            <ion-icon class="yy" name="chatbubble-outline"></ion-icon>
                        </div>
                        <div>
                            <ion-icon class="yy" name="paper-plane-outline"></ion-icon>
                        </div>
                        <div class="rep">
                            <label class="ui-bookmark">
                                <input type="checkbox">
                                <div class="bookmark" style="width: 35px;height: 35px;font-size: 30px;">
                                    <svg viewBox="0 0 32 32">
                                        <g>
                                            <path d="M27 4v27a1 1 0 0 1-1.625.781L16 24.281l-9.375 7.5A1 1 0 0 1 5 31V4a4 4 0 0 1 4-4h14a4 4 0 0 1 4 4z"></path>
                                        </g>
                                    </svg>
                                </div>
                            </label>
                        </div>
                    </div>
                    <div class="card-body">
                        <strong>Нравится:</strong> @Model.LikeCount пользователям<br>
                        <div class="aut">
                            <strong class="sas">@Model.User.Login: </strong>
                            <p class="card-title description">@Model.Description</p>
                            <button class="fgh toggle-button">Ещё</button>
                        </div>
                    </div>
                   <div class="comments">
                       <div class="comments-container" data-id="@Model.Id"></div>
                        <button class="load-comments-button" data-id="@Model.Id">Показать комментарии...(@Model.ComentsCount)</button>
                         <button class="hide-comments-button" data-id="@Model.Id" style="display: none">Скрыть комментарии</button>
                       <form asp-action="Comment" method="post" class="comment-form">
                           <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                           <div class="input-wrapperss">
                               <label class="control-label"></label>
                               <input type="hidden" name="publicationId" value="@Model.Id" />
                               <input class="input-boxss" type="text" name="comentText" placeholder="Добавить комментарий..." oninput="toggleButtonVisibility()" />
                               <span class="underliness"></span>
                               <button class="hidden submit-button gfg" onclick="submitComment(this)">Опубликовать</button>
                           </div>
                       </form>
                    </div>
                    </div>
                </div>


<script>
                           function updateCounter() {
                               let eedElements = document.querySelectorAll(".eed");
                               eedElements.forEach(function(element) {
                                   let dateStr = element.textContent;
                                   let dateParts = dateStr.split(' ');
                                   let date = dateParts[0].split('.');
                                   let time = dateParts[1].split(':');
                                   let publicationDate = new Date(date[2], date[1] - 1, date[0], time[0], time[1], time[2]);
                                   let currentDate = new Date();
                                   let timeDifference = currentDate - publicationDate;
                                   let minutesDifference = Math.floor(timeDifference / 60000); // Разница в минутах
                                   let hoursDifference = Math.floor(minutesDifference / 60); // Разница в часах
                                   let daysDifference = Math.floor(hoursDifference / 24); // Разница в днях
                                   let counterText = "Опубликовано ";
                           
                                   if (daysDifference > 0) {
                                       counterText += daysDifference + " дней ";
                                   } else if (hoursDifference > 0) {
                                       counterText += hoursDifference + " часов ";
                                   } else if (minutesDifference > 0) {
                                       counterText += minutesDifference + " минуты ";
                                   } else {
                                       counterText += "меньше минуты";
                                   }
                                   counterText += " назад";
                                   let existingCounterElements = element.parentNode.querySelectorAll(".timeCounter");
                                   existingCounterElements.forEach(function(existingElement) {
                                       existingElement.parentNode.removeChild(existingElement);
                                   });
                                   let counterElement = document.createElement("p");
                                   counterElement.classList.add("timeCounter");
                                   counterElement.textContent = counterText;
                                   element.parentNode.appendChild(counterElement);
                                   counterElement.setAttribute("style", "margin-bottom: 0");
                               });
                           }
                           setInterval(updateCounter, 1000);
                            </script>
<script>
                            document.addEventListener("DOMContentLoaded", async function () {
                                const checElements = document.querySelectorAll(".chec");
                        
                                async function checkLikeStatus(element) {
                                    try {
                                        console.log("Запрос к серверу");
                                        const likeButton = element.querySelector(".like-button"); // Выбираем элемент с классом "like-button"
                                        const likeIcon = element.querySelector(".like-icon"); // Выбираем элемент с классом "like-icon"
                                        const publicationId = likeButton.getAttribute("data-publication-id"); // Получаем идентификатор публикации из атрибута
                        
                                        const response = await fetch(`/Publication/CheckLikeStatus?publicationId=${publicationId}`);
                                        if (response.ok) {
                                            const data = await response.json();
                                            console.log("Результат запроса:", data);
                                            if (data.isLiked) {
                                                likeIcon.style.fill = "#ff000b";
                                                console.log("Цвет изменен на красный");
                                            }
                                        }
                                    } catch (error) {
                                        console.error("Ошибка при проверке статуса лайка:", error);
                                    }
                                }
                        
                                checElements.forEach(function (element) {
                                    checkLikeStatus(element);
                                });
                            });
                        </script>
<script>
                            document.addEventListener("DOMContentLoaded", function() {
                                const descriptions = document.querySelectorAll(".description");
                                const toggleButtons = document.querySelectorAll(".toggle-button");
                        
                                for (let i = 0; i < descriptions.length; i++) {
                                    let descriptionElement = descriptions[i];
                                    let toggleButton = toggleButtons[i];
                                    let originalDescription = descriptionElement.textContent;
                        
                                    if (originalDescription.length > 100) {
                                        let trimmedDescription = originalDescription.substring(0, 100);
                                        let fullDescription = originalDescription;
                                        descriptionElement.textContent = trimmedDescription;
                                        toggleButton.addEventListener("click", function () {
                                            if (descriptionElement.textContent === trimmedDescription) {
                                                descriptionElement.textContent = fullDescription;
                                                this.textContent = "Скрыть";
                                            } else {
                                                descriptionElement.textContent = trimmedDescription;
                                                this.textContent = "Ещё";
                                            }
                                        });
                                    } else if(originalDescription.length < 100) {
                                        toggleButton.style.display = "none";
                                    }else {
                                         toggleButton.style.display = "contents";
                                    }
                                }
                            });
                        </script>
<script>
                           const loadButtons = document.querySelectorAll('.load-comments-button');
                           const hideButtons = document.querySelectorAll('.hide-comments-button');
                           loadButtons.forEach((button, index) => {
                               button.addEventListener('click', function () {
                                   const publicationId = this.getAttribute('data-id');
                                   const commentsContainer = document.querySelector(`.comments-container[data-id="${publicationId}"]`);
                                   loadComments(publicationId, commentsContainer);
                                   button.style.display = 'none';
                                   hideButtons[index].style.display = 'inline';
                               });
                           });
                           hideButtons.forEach((button, index) => {
                               button.addEventListener('click', function () {
                                   const publicationId = this.getAttribute('data-id');
                                   const commentsContainer = document.querySelector(`.comments-container[data-id="${publicationId}"]`);
                                   commentsContainer.innerHTML = '';
                                   button.style.display = 'none';
                                   loadButtons[index].style.display = 'inline';
                               });
                           });
                      
                     function loadComments(publicationId, commentsContainer) {
                       commentsContainer.innerHTML = '';
                       commentsContainer.style.overflowY = 'auto';
                       commentsContainer.style.maxHeight = '300px';
                     
                       function updateCommentTimes() {
                         const commentTimeElements = document.querySelectorAll('.comment-time-published');
                     
                         commentTimeElements.forEach(timeElement => {
                           const commentDateTimeStr = timeElement.getAttribute('data-comment-date');
                           const commentDateTime = new Date(commentDateTimeStr);
                           const currentTime = new Date();
                     
                           const timeDifference = currentTime - commentDateTime;
                           const secondsDifference = Math.floor(timeDifference / 1000);
                           const minutesDifference = Math.floor(secondsDifference / 60);
                           const hoursDifference = Math.floor(minutesDifference / 60);
                           const daysDifference = Math.floor(hoursDifference / 24);
                     
                           let counterText = "Опубликовано ";
                     
                           if (daysDifference > 0) {
                             counterText += daysDifference + " дней ";
                           } else if (hoursDifference > 0) {
                             counterText += hoursDifference + " часов ";
                           } else if (minutesDifference > 0) {
                             counterText += minutesDifference + " минут ";
                           } else {
                             counterText = "меньше минуты назад";
                           }
                     
                           counterText += " назад";
                           timeElement.textContent = counterText;
                         });
                       }
                     
                       fetch(`/Publication/GetComments?publicationId=${publicationId}`)
                         .then(response => response.text())
                         .then(commentsText => {
                             console.log(commentsText);
                           const comments = commentsText.split('\n');
                     
                           comments.forEach(commentText => {
                             const [userPart, textAndDate] = commentText.split(':');
                             const [userAvatar, userName] = userPart.split(',');
                             const [text, commentDateStr] = textAndDate.split(',');
                             const cleanedUserAvatar = userAvatar ? userAvatar.trim() : '';
                             const cleanedUserName = userName ? userName.trim() : '';
                             const cleanedText = text ? text.trim() : '';
                     console.log(textAndDate);
                             if (cleanedUserAvatar && cleanedUserName && cleanedText && commentDateStr) {
                               const obaDiv = document.createElement('div');
                               obaDiv.classList.add('oba');
                               const obaDiv2 = document.createElement('div');
                               obaDiv2.classList.add('oba2');
                               const avatarImg = document.createElement('img');
                               avatarImg.src = cleanedUserAvatar;
                               avatarImg.alt = cleanedUserName;
                               avatarImg.classList.add('comment-avatar');
                               const userNameSpan = document.createElement('span');
                               userNameSpan.textContent = cleanedUserName;
                               userNameSpan.classList.add('comment-username');
                               const textDiv = document.createElement('div');
                               textDiv.textContent = cleanedText;
                               textDiv.classList.add ('comment-text');
                               const timePublishedDiv = document.createElement('div');
                               timePublishedDiv.classList.add('comment-time-published');
                               timePublishedDiv.setAttribute('data-comment-date', commentDateStr);
                     
                               obaDiv2.appendChild(userNameSpan);
                               obaDiv2.appendChild(textDiv);
                               obaDiv2.appendChild(timePublishedDiv);
                               obaDiv.appendChild(avatarImg);
                               obaDiv.appendChild(obaDiv2);
                               commentsContainer.appendChild(obaDiv);
                             } else {
                               console.error('Неправильный формат данных комментария:', commentText);
                             }
                           });
                     
                           updateCommentTimes();
                           setInterval(updateCommentTimes, 60000);
                         })
                         .catch(error => {
                           console.error('Ошибка при загрузке комментариев:', error);
                         });
                     }


                       </script>
<script>
                                  function toggleButtonVisibility() {
                                      const inputField = document.querySelector('.input-boxss');
                                      const submitButton = document.querySelector('.submit-button');
                                  
                                      if (inputField.value.trim() !== '') {
                                          submitButton.style.display = 'block';
                                      } else {
                                          submitButton.style.display = 'none';
                                      }
                                  }
                                  
                                  async function submitComment() {
                                      const inputField = document.querySelector('.input-boxss');
                                      const commentText = inputField.value.trim();
                                      const publicationId = document.querySelector('input[name="publicationId"]').value;
                                  
                                      if (commentText !== '') {
                                          const response = await fetch('/Publication/Comment', {
                                              method: 'POST',
                                              headers: {
                                                  'Content-Type': 'application/x-www-form-urlencoded',
                                              },
                                              body: `publicationId=${publicationId}&comentText=${commentText}`,
                                          });
                                  
                                          if (response.ok) {
                                              console.log('Комментарий отправлен: ' + commentText);
                                              inputField.value = '';
                                              toggleButtonVisibility();
                                          }
                                      } 
                                  }
                                  toggleButtonVisibility();

                         </script>



<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
<script src="~/js/site.js" asp-append-version="true"></script>
<script type="module" src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js"></script>
<script nomodule src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js"></script>